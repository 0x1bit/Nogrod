// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import time "time"
import wallet "wallet"

// Wallet is an autogenerated mock type for the Wallet type
type Wallet struct {
	mock.Mock
}

// GetAccountInfo provides a mock function with given fields: _a0
func (_m *Wallet) GetAccountInfo(_a0 uint64) (*wallet.AccountInfo, error) {
	ret := _m.Called(_a0)

	var r0 *wallet.AccountInfo
	if rf, ok := ret.Get(0).(func(uint64) *wallet.AccountInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wallet.AccountInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalance provides a mock function with given fields: _a0
func (_m *Wallet) GetBalance(_a0 uint64) (int64, error) {
	ret := _m.Called(_a0)

	var r0 int64
	if rf, ok := ret.Get(0).(func(uint64) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockInfo provides a mock function with given fields: _a0
func (_m *Wallet) GetBlockInfo(_a0 uint64) (*wallet.BlockInfo, error) {
	ret := _m.Called(_a0)

	var r0 *wallet.BlockInfo
	if rf, ok := ret.Get(0).(func(uint64) *wallet.BlockInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wallet.BlockInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConstantsInfo provides a mock function with given fields:
func (_m *Wallet) GetConstantsInfo() (*wallet.ConstantsInfo, error) {
	ret := _m.Called()

	var r0 *wallet.ConstantsInfo
	if rf, ok := ret.Get(0).(func() *wallet.ConstantsInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wallet.ConstantsInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGenerationTime provides a mock function with given fields: height
func (_m *Wallet) GetGenerationTime(height uint64) (int32, error) {
	ret := _m.Called(height)

	var r0 int32
	if rf, ok := ret.Get(0).(func(uint64) int32); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIncomingMsgsSince provides a mock function with given fields: date
func (_m *Wallet) GetIncomingMsgsSince(date time.Time) (map[uint64]string, error) {
	ret := _m.Called(date)

	var r0 map[uint64]string
	if rf, ok := ret.Get(0).(func(time.Time) map[uint64]string); ok {
		r0 = rf(date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint64]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMiningInfo provides a mock function with given fields:
func (_m *Wallet) GetMiningInfo() (*wallet.MiningInfo, error) {
	ret := _m.Called()

	var r0 *wallet.MiningInfo
	if rf, ok := ret.Get(0).(func() *wallet.MiningInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wallet.MiningInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRewardRecipientInfo provides a mock function with given fields: _a0
func (_m *Wallet) GetRewardRecipientInfo(_a0 uint64) (*wallet.RewardRecipientInfo, error) {
	ret := _m.Called(_a0)

	var r0 *wallet.RewardRecipientInfo
	if rf, ok := ret.Get(0).(func(uint64) *wallet.RewardRecipientInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wallet.RewardRecipientInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsPoolRewardRecipient provides a mock function with given fields: accountID
func (_m *Wallet) IsPoolRewardRecipient(accountID uint64) (bool, error) {
	ret := _m.Called(accountID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64) bool); ok {
		r0 = rf(accountID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendPayment provides a mock function with given fields: _a0, _a1
func (_m *Wallet) SendPayment(_a0 uint64, _a1 int64) (uint64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(uint64, int64) uint64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields:
func (_m *Wallet) Stop() {
	_m.Called()
}

// SubmitNonce provides a mock function with given fields: _a0, _a1
func (_m *Wallet) SubmitNonce(_a0 uint64, _a1 uint64) (uint64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(uint64, uint64) uint64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WonBlock provides a mock function with given fields: _a0, _a1
func (_m *Wallet) WonBlock(_a0 uint64, _a1 uint64) (bool, *wallet.BlockInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64, uint64) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *wallet.BlockInfo
	if rf, ok := ret.Get(1).(func(uint64, uint64) *wallet.BlockInfo); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wallet.BlockInfo)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uint64, uint64) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
